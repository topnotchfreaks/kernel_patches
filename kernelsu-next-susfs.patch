From 4f3138d0997e446205c3435cb31b436051464017 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Sun, 23 Feb 2025 02:05:21 +0600
Subject: [PATCH 1/3] KernelSU: add KSU manual hook support CONFIG_KSU_MANUAL

---
 drivers/input/input.c | 15 +++++++++++++++
 fs/devpts/inode.c     | 12 ++++++++++++
 fs/exec.c             | 19 +++++++++++++++++++
 fs/open.c             | 13 +++++++++++++
 fs/read_write.c       | 15 +++++++++++++++
 fs/stat.c             | 12 ++++++++++++
 6 files changed, 86 insertions(+)

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 171f71bd4c2a2..08e207e3f7bc4 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -375,6 +375,13 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
+#endif
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
@@ -385,6 +392,14 @@ static void input_handle_event(struct input_dev *dev,
 		return;
 
 	disposition = input_get_disposition(dev, type, code, &value);
+
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+#endif
+#endif
+
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index 555e4cb31e65c..a41911bfcf1b5 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -601,6 +601,12 @@ extern bool ksu_devpts_hook;
 extern int ksu_handle_devpts(struct inode*);
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern int ksu_handle_devpts(struct inode*);
+#endif
+#endif
+
 /**
  * devpts_get_priv -- get private data for a slave
  * @pts_inode: inode of the slave
@@ -615,6 +621,12 @@ void *devpts_get_priv(struct dentry *dentry)
 	}
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+    ksu_handle_devpts(dentry->d_inode);
+#endif
+#endif
+
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
 		return NULL;
 	return dentry->d_fsdata;
diff --git a/fs/exec.c b/fs/exec.c
index c0761e3770c45..56ce58191e5d6 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1897,6 +1897,16 @@ extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				void *envp, int *flags);
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+#endif
+#endif
+
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -1913,6 +1923,15 @@ static int do_execveat_common(int fd, struct filename *filename,
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_execveat_hook))
+		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+	else
+		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+#endif
+#endif
+
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
 	 * set*uid() to execve() because too many poorly written programs
diff --git a/fs/open.c b/fs/open.c
index 064978efdc230..5ef0a4234d0a4 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -340,6 +340,13 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
+#endif
+#endif
+
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -414,6 +421,12 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	}
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+#endif
+#endif
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
diff --git a/fs/read_write.c b/fs/read_write.c
index 3f68186207a94..2f7c8cb61fca4 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -462,10 +462,25 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL_NS(kernel_read, ANDROID_GKI_VFS_EXPORT_ONLY);
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
+#endif
+#endif
+
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU 
+	if (unlikely(ksu_vfs_read_hook))
+		ksu_handle_vfs_read(&file, &buf, &count, &pos);
+#endif
+#endif
+
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
diff --git a/fs/stat.c b/fs/stat.c
index a66a9cd47f4aa..76d047858d13e 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -202,6 +202,12 @@ int vfs_fstat(int fd, struct kstat *stat)
 	return error;
 }
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif
+#endif
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -239,6 +245,12 @@ static int vfs_statx(int dfd, const char __user *filename, int flags,
 	}
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	ksu_handle_stat(&dfd, &filename, &flags);
+#endif
+#endif
+
 	if (flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT | AT_EMPTY_PATH |
 		      AT_STATX_SYNC_TYPE))
 		return -EINVAL;
-- 
2.49.0


From 7feccf47285aaa98428a8b9a84d4f55f23b896f7 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Tue, 25 Feb 2025 03:52:24 +0600
Subject: [PATCH 2/3] fs: remove CONFIG_KSU_MANUAL guards

---
 drivers/input/input.c | 4 ----
 fs/devpts/inode.c     | 4 ----
 fs/exec.c             | 4 ----
 fs/open.c             | 4 ----
 fs/read_write.c       | 4 ----
 fs/stat.c             | 4 ----
 6 files changed, 24 deletions(-)

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 08e207e3f7bc4..98f84715b19f9 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -375,12 +375,10 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern bool ksu_input_hook __read_mostly;
 extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
 #endif
-#endif
 
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
@@ -393,11 +391,9 @@ static void input_handle_event(struct input_dev *dev,
 
 	disposition = input_get_disposition(dev, type, code, &value);
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	if (unlikely(ksu_input_hook))
 		ksu_handle_input_handle_event(&type, &code, &value);
-#endif
 #endif
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index a41911bfcf1b5..65a369432f751 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -601,11 +601,9 @@ extern bool ksu_devpts_hook;
 extern int ksu_handle_devpts(struct inode*);
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern int ksu_handle_devpts(struct inode*);
 #endif
-#endif
 
 /**
  * devpts_get_priv -- get private data for a slave
@@ -621,10 +619,8 @@ void *devpts_get_priv(struct dentry *dentry)
 	}
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
     ksu_handle_devpts(dentry->d_inode);
-#endif
 #endif
 
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
diff --git a/fs/exec.c b/fs/exec.c
index 56ce58191e5d6..66a4e37e519c8 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1897,7 +1897,6 @@ extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				void *envp, int *flags);
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern bool ksu_execveat_hook __read_mostly;
 extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
@@ -1905,7 +1904,6 @@ extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *ar
 extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				 void *argv, void *envp, int *flags);
 #endif
-#endif
 
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
@@ -1923,13 +1921,11 @@ static int do_execveat_common(int fd, struct filename *filename,
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	if (unlikely(ksu_execveat_hook))
 		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
 	else
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
-#endif
 #endif
 
 	/*
diff --git a/fs/open.c b/fs/open.c
index 5ef0a4234d0a4..3960205143a69 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -340,12 +340,10 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
 			 int *flags);
 #endif
-#endif
 
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
@@ -421,10 +419,8 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	}
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
-#endif
 #endif
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
diff --git a/fs/read_write.c b/fs/read_write.c
index 2f7c8cb61fca4..04ff0dc3b9e15 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -462,23 +462,19 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL_NS(kernel_read, ANDROID_GKI_VFS_EXPORT_ONLY);
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern bool ksu_vfs_read_hook __read_mostly;
 extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
 			size_t *count_ptr, loff_t **pos);
 #endif
-#endif
 
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU 
 	if (unlikely(ksu_vfs_read_hook))
 		ksu_handle_vfs_read(&file, &buf, &count, &pos);
-#endif
 #endif
 
 	if (!(file->f_mode & FMODE_READ))
diff --git a/fs/stat.c b/fs/stat.c
index 76d047858d13e..85760bfb6566b 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -202,11 +202,9 @@ int vfs_fstat(int fd, struct kstat *stat)
 	return error;
 }
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
 #endif
-#endif
 
 /**
  * vfs_statx - Get basic and extra attributes by filename
@@ -245,10 +243,8 @@ static int vfs_statx(int dfd, const char __user *filename, int flags,
 	}
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	ksu_handle_stat(&dfd, &filename, &flags);
-#endif
 #endif
 
 	if (flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT | AT_EMPTY_PATH |
-- 
2.49.0


From 122317c55faf23218c452aeddae577892596d827 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Fri, 7 Mar 2025 21:47:53 +0600
Subject: [PATCH 3/3] kernelsu: refactor: scope-minimized manual hooks

---
 drivers/input/input.c | 21 ++++++++++-----------
 drivers/tty/pty.c     |  7 +++++++
 fs/devpts/inode.c     |  6 ------
 fs/exec.c             | 33 ++++++++++++++++++---------------
 fs/open.c             | 17 ++++++++---------
 fs/read_write.c       | 21 ++++++++++-----------
 fs/stat.c             | 18 ++++++++++--------
 7 files changed, 63 insertions(+), 60 deletions(-)

diff --git a/drivers/input/input.c b/drivers/input/input.c
index 98f84715b19f9..be16d2d0abb92 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -375,11 +375,6 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
-#ifdef CONFIG_KSU
-extern bool ksu_input_hook __read_mostly;
-extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
-#endif
-
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
@@ -390,12 +385,6 @@ static void input_handle_event(struct input_dev *dev,
 		return;
 
 	disposition = input_get_disposition(dev, type, code, &value);
-
-#ifdef CONFIG_KSU
-	if (unlikely(ksu_input_hook))
-		ksu_handle_input_handle_event(&type, &code, &value);
-#endif
-
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
@@ -457,11 +446,21 @@ static void input_handle_event(struct input_dev *dev,
  * to 'seed' initial state of a switch or initial position of absolute
  * axis, etc.
  */
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
+
 void input_event(struct input_dev *dev,
 		 unsigned int type, unsigned int code, int value)
 {
 	unsigned long flags;
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+#endif
+
 	if (is_event_supported(type, dev->evbit, EV_MAX)) {
 
 		spin_lock_irqsave(&dev->event_lock, flags);
diff --git a/drivers/tty/pty.c b/drivers/tty/pty.c
index 752dab3356d72..deb7c4ed493ed 100644
--- a/drivers/tty/pty.c
+++ b/drivers/tty/pty.c
@@ -702,11 +702,18 @@ static struct tty_struct *ptm_unix98_lookup(struct tty_driver *driver,
  *	This provides our locking for the tty pointer.
  */
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern int ksu_handle_devpts(struct inode*);
+#endif
+
 static struct tty_struct *pts_unix98_lookup(struct tty_driver *driver,
 		struct file *file, int idx)
 {
 	struct tty_struct *tty;
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_devpts((struct inode *)file->f_path.dentry->d_inode);
+#endif
 	mutex_lock(&devpts_mutex);
 	tty = devpts_get_priv(file->f_path.dentry);
 	mutex_unlock(&devpts_mutex);
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index 65a369432f751..51e503bdeefaa 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -601,9 +601,6 @@ extern bool ksu_devpts_hook;
 extern int ksu_handle_devpts(struct inode*);
 #endif
 
-#ifdef CONFIG_KSU
-extern int ksu_handle_devpts(struct inode*);
-#endif
 
 /**
  * devpts_get_priv -- get private data for a slave
@@ -619,9 +616,6 @@ void *devpts_get_priv(struct dentry *dentry)
 	}
 #endif
 
-#ifdef CONFIG_KSU
-    ksu_handle_devpts(dentry->d_inode);
-#endif
 
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
 		return NULL;
diff --git a/fs/exec.c b/fs/exec.c
index 66a4e37e519c8..98b8ee2437e1f 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1897,14 +1897,6 @@ extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				void *envp, int *flags);
 #endif
 
-#ifdef CONFIG_KSU
-extern bool ksu_execveat_hook __read_mostly;
-extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
-			void *envp, int *flags);
-extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
-				 void *argv, void *envp, int *flags);
-#endif
-
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -1921,13 +1913,6 @@ static int do_execveat_common(int fd, struct filename *filename,
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 #endif
 
-#ifdef CONFIG_KSU
-	if (unlikely(ksu_execveat_hook))
-		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
-	else
-		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
-#endif
-
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
 	 * set*uid() to execve() because too many poorly written programs
@@ -2057,12 +2042,26 @@ int kernel_execve(const char *kernel_filename,
 	return retval;
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+#endif
+
 static int do_execve(struct filename *filename,
 	const char __user *const __user *__argv,
 	const char __user *const __user *__envp)
 {
 	struct user_arg_ptr argv = { .ptr.native = __argv };
 	struct user_arg_ptr envp = { .ptr.native = __envp };
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (unlikely(ksu_execveat_hook))
+		ksu_handle_execveat((int *)AT_FDCWD, &filename, &argv, &envp, 0);
+	else
+		ksu_handle_execveat_sucompat((int *)AT_FDCWD, &filename, NULL, NULL, NULL);
+#endif
 	return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
 }
 
@@ -2090,6 +2089,10 @@ static int compat_do_execve(struct filename *filename,
 		.is_compat = true,
 		.ptr.compat = __envp,
 	};
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (!ksu_execveat_hook)
+		ksu_handle_execveat_sucompat((int *)AT_FDCWD, &filename, NULL, NULL, NULL); /* 32-bit su */
+#endif
 	return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
 }
 
diff --git a/fs/open.c b/fs/open.c
index 3960205143a69..eebd1ee72c2f8 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -340,11 +340,6 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
-#ifdef CONFIG_KSU
-extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
-			 int *flags);
-#endif
-
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -419,10 +414,6 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	}
 #endif
 
-#ifdef CONFIG_KSU
-	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
-#endif
-
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
@@ -487,8 +478,16 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	return res;
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			                    int *flags);
+#endif
+
 SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 {
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+#endif
 	return do_faccessat(dfd, filename, mode, 0);
 }
 
diff --git a/fs/read_write.c b/fs/read_write.c
index 04ff0dc3b9e15..a07056fc715f0 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -462,21 +462,10 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL_NS(kernel_read, ANDROID_GKI_VFS_EXPORT_ONLY);
 
-#ifdef CONFIG_KSU
-extern bool ksu_vfs_read_hook __read_mostly;
-extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
-			size_t *count_ptr, loff_t **pos);
-#endif
-
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
-#ifdef CONFIG_KSU 
-	if (unlikely(ksu_vfs_read_hook))
-		ksu_handle_vfs_read(&file, &buf, &count, &pos);
-#endif
-
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
@@ -639,8 +628,18 @@ ssize_t ksys_read(unsigned int fd, char __user *buf, size_t count)
 	return ret;
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_sys_read(unsigned int fd, char __user **buf_ptr,
+			size_t *count_ptr);
+#endif
+
 SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
 {
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (unlikely(ksu_vfs_read_hook)) 
+		ksu_handle_sys_read(fd, &buf, &count);
+#endif
 	return ksys_read(fd, buf, count);
 }
 
diff --git a/fs/stat.c b/fs/stat.c
index 85760bfb6566b..767aedf7425ff 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -202,10 +202,6 @@ int vfs_fstat(int fd, struct kstat *stat)
 	return error;
 }
 
-#ifdef CONFIG_KSU
-extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
-#endif
-
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -243,10 +239,6 @@ static int vfs_statx(int dfd, const char __user *filename, int flags,
 	}
 #endif
 
-#ifdef CONFIG_KSU
-	ksu_handle_stat(&dfd, &filename, &flags);
-#endif
-
 	if (flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT | AT_EMPTY_PATH |
 		      AT_STATX_SYNC_TYPE))
 		return -EINVAL;
@@ -450,6 +442,10 @@ SYSCALL_DEFINE2(newlstat, const char __user *, filename,
 	return cp_new_stat(&stat, statbuf);
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif
+
 #if !defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_SYS_NEWFSTATAT)
 SYSCALL_DEFINE4(newfstatat, int, dfd, const char __user *, filename,
 		struct stat __user *, statbuf, int, flag)
@@ -457,6 +453,9 @@ SYSCALL_DEFINE4(newfstatat, int, dfd, const char __user *, filename,
 	struct kstat stat;
 	int error;
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_stat(&dfd, &filename, &flag);
+#endif
 	error = vfs_fstatat(dfd, filename, &stat, flag);
 	if (error)
 		return error;
@@ -608,6 +607,9 @@ SYSCALL_DEFINE4(fstatat64, int, dfd, const char __user *, filename,
 	struct kstat stat;
 	int error;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_COMPAT) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_stat(&dfd, &filename, &flag); /* 32-bit su */
+#endif
 	error = vfs_fstatat(dfd, filename, &stat, flag);
 	if (error)
 		return error;
-- 
2.49.0

