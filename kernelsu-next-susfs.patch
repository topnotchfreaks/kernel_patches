From 0c3c39a7663c76944e83b7f0f3043546fdcd489f Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Sun, 23 Feb 2025 02:05:21 +0600
Subject: [PATCH 1/8] KernelSU: update subproject reference and add KSU manual
 hook support CONFIG_KSU_MANUAL

---
 KernelSU-Next                                 |  2 +-
 drivers/input/input.c                         | 15 +++++++++++++++
 fs/devpts/inode.c                             | 12 ++++++++++++
 fs/exec.c                                     | 19 +++++++++++++++++++
 fs/open.c                                     | 13 +++++++++++++
 fs/read_write.c                               | 15 +++++++++++++++
 fs/stat.c                                     | 12 ++++++++++++
 9 files changed, 89 insertions(+), 1 deletion(-)

diff --git a/KernelSU-Next b/KernelSU-Next
index 81dff86d0298d..86425c3e02122 160000
--- a/KernelSU-Next
+++ b/KernelSU-Next
@@ -1 +1 @@
-Subproject commit 81dff86d0298da936024c9702f4db01fde1f7200
+Subproject commit 86425c3e021226dab29c16634b2dd442201cbc5f
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 5ca3f11d2d759..d4850c0a31681 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -375,6 +375,13 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
+#endif
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
@@ -385,6 +392,14 @@ static void input_handle_event(struct input_dev *dev,
 		return;
 
 	disposition = input_get_disposition(dev, type, code, &value);
+
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+#endif
+#endif
+
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index 555e4cb31e65c..a41911bfcf1b5 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -601,6 +601,12 @@ extern bool ksu_devpts_hook;
 extern int ksu_handle_devpts(struct inode*);
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern int ksu_handle_devpts(struct inode*);
+#endif
+#endif
+
 /**
  * devpts_get_priv -- get private data for a slave
  * @pts_inode: inode of the slave
@@ -615,6 +621,12 @@ void *devpts_get_priv(struct dentry *dentry)
 	}
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+    ksu_handle_devpts(dentry->d_inode);
+#endif
+#endif
+
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
 		return NULL;
 	return dentry->d_fsdata;
diff --git a/fs/exec.c b/fs/exec.c
index b3421f3669884..ccd1234253a20 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1889,6 +1889,16 @@ extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				void *envp, int *flags);
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+#endif
+#endif
+
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -1905,6 +1915,15 @@ static int do_execveat_common(int fd, struct filename *filename,
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	if (unlikely(ksu_execveat_hook))
+		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+	else
+		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
+#endif
+#endif
+
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
 	 * set*uid() to execve() because too many poorly written programs
diff --git a/fs/open.c b/fs/open.c
index 1789168734f24..1d7213fc98fd5 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -340,6 +340,13 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
+#endif
+#endif
+
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -414,6 +421,12 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	}
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+#endif
+#endif
+
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
diff --git a/fs/read_write.c b/fs/read_write.c
index 3f68186207a94..2f7c8cb61fca4 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -462,10 +462,25 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL_NS(kernel_read, ANDROID_GKI_VFS_EXPORT_ONLY);
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
+#endif
+#endif
+
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU 
+	if (unlikely(ksu_vfs_read_hook))
+		ksu_handle_vfs_read(&file, &buf, &count, &pos);
+#endif
+#endif
+
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
diff --git a/fs/stat.c b/fs/stat.c
index a66a9cd47f4aa..76d047858d13e 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -202,6 +202,12 @@ int vfs_fstat(int fd, struct kstat *stat)
 	return error;
 }
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif
+#endif
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -239,6 +245,12 @@ static int vfs_statx(int dfd, const char __user *filename, int flags,
 	}
 #endif
 
+#ifdef CONFIG_KSU_MANUAL
+#ifdef CONFIG_KSU
+	ksu_handle_stat(&dfd, &filename, &flags);
+#endif
+#endif
+
 	if (flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT | AT_EMPTY_PATH |
 		      AT_STATX_SYNC_TYPE))
 		return -EINVAL;
-- 
2.49.0


From c4306be2093d4e9129976e4d1e490e467e624854 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Tue, 25 Feb 2025 03:52:24 +0600
Subject: [PATCH 2/8] fs: remove CONFIG_KSU_MANUAL guards arm64/configs: add
 CONFIG_KSU_WITH_KPROBES

---
 arch/arm64/configs/chickernel-next-variants/ksu.config       | 2 +-
 arch/arm64/configs/chickernel-next-variants/ksu_susfs.config | 2 +-
 drivers/input/input.c                                        | 4 ----
 fs/devpts/inode.c                                            | 4 ----
 fs/exec.c                                                    | 4 ----
 fs/open.c                                                    | 4 ----
 fs/read_write.c                                              | 4 ----
 fs/stat.c                                                    | 4 ----
 8 files changed, 2 insertions(+), 26 deletions(-)

diff --git a/arch/arm64/configs/chickernel-next-variants/ksu.config b/arch/arm64/configs/chickernel-next-variants/ksu.config
index 48a0be7db0163..a35871955d5cb 100644
--- a/arch/arm64/configs/chickernel-next-variants/ksu.config
+++ b/arch/arm64/configs/chickernel-next-variants/ksu.config
@@ -1,4 +1,4 @@
 CONFIG_KSU=y
-CONFIG_KSU_MANUAL=n
+CONFIG_KSU_WITH_KPROBES=n
 
 CONFIG_LOCALVERSION="-chickernel-next-dev-5-ksu"
diff --git a/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config b/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
index 2c9c6798899c0..15045f6330236 100644
--- a/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
+++ b/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
@@ -1,5 +1,5 @@
 CONFIG_KSU=y
-CONFIG_KSU_MANUAL=n
+CONFIG_KSU_WITH_KPROBES=n
 
 CONFIG_KSU_SUSFS=y
 CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
diff --git a/drivers/input/input.c b/drivers/input/input.c
index d4850c0a31681..d7a6e238901b8 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -375,12 +375,10 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern bool ksu_input_hook __read_mostly;
 extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
 #endif
-#endif
 
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
@@ -393,11 +391,9 @@ static void input_handle_event(struct input_dev *dev,
 
 	disposition = input_get_disposition(dev, type, code, &value);
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	if (unlikely(ksu_input_hook))
 		ksu_handle_input_handle_event(&type, &code, &value);
-#endif
 #endif
 
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index a41911bfcf1b5..65a369432f751 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -601,11 +601,9 @@ extern bool ksu_devpts_hook;
 extern int ksu_handle_devpts(struct inode*);
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern int ksu_handle_devpts(struct inode*);
 #endif
-#endif
 
 /**
  * devpts_get_priv -- get private data for a slave
@@ -621,10 +619,8 @@ void *devpts_get_priv(struct dentry *dentry)
 	}
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
     ksu_handle_devpts(dentry->d_inode);
-#endif
 #endif
 
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
diff --git a/fs/exec.c b/fs/exec.c
index ccd1234253a20..9ea0a32deb14f 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1889,7 +1889,6 @@ extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				void *envp, int *flags);
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern bool ksu_execveat_hook __read_mostly;
 extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
@@ -1897,7 +1896,6 @@ extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *ar
 extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				 void *argv, void *envp, int *flags);
 #endif
-#endif
 
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
@@ -1915,13 +1913,11 @@ static int do_execveat_common(int fd, struct filename *filename,
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	if (unlikely(ksu_execveat_hook))
 		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
 	else
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
-#endif
 #endif
 
 	/*
diff --git a/fs/open.c b/fs/open.c
index 1d7213fc98fd5..b40c47b4aadc4 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -340,12 +340,10 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
 			 int *flags);
 #endif
-#endif
 
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
@@ -421,10 +419,8 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	}
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
-#endif
 #endif
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
diff --git a/fs/read_write.c b/fs/read_write.c
index 2f7c8cb61fca4..04ff0dc3b9e15 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -462,23 +462,19 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL_NS(kernel_read, ANDROID_GKI_VFS_EXPORT_ONLY);
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern bool ksu_vfs_read_hook __read_mostly;
 extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
 			size_t *count_ptr, loff_t **pos);
 #endif
-#endif
 
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU 
 	if (unlikely(ksu_vfs_read_hook))
 		ksu_handle_vfs_read(&file, &buf, &count, &pos);
-#endif
 #endif
 
 	if (!(file->f_mode & FMODE_READ))
diff --git a/fs/stat.c b/fs/stat.c
index 76d047858d13e..85760bfb6566b 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -202,11 +202,9 @@ int vfs_fstat(int fd, struct kstat *stat)
 	return error;
 }
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
 #endif
-#endif
 
 /**
  * vfs_statx - Get basic and extra attributes by filename
@@ -245,10 +243,8 @@ static int vfs_statx(int dfd, const char __user *filename, int flags,
 	}
 #endif
 
-#ifdef CONFIG_KSU_MANUAL
 #ifdef CONFIG_KSU
 	ksu_handle_stat(&dfd, &filename, &flags);
-#endif
 #endif
 
 	if (flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT | AT_EMPTY_PATH |
-- 
2.49.0


From 0cbfb6a47bea09dc6f6bb39eeae5414bb64c4611 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Tue, 25 Feb 2025 04:16:15 +0600
Subject: [PATCH 3/8] arm64/configs: update local version suffix to KSUS and
 KSUS-SUSFS

---
 arch/arm64/configs/chickernel-next-variants/ksu.config       | 4 ++--
 arch/arm64/configs/chickernel-next-variants/ksu_susfs.config | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/configs/chickernel-next-variants/ksu.config b/arch/arm64/configs/chickernel-next-variants/ksu.config
index a35871955d5cb..27c962051df3c 100644
--- a/arch/arm64/configs/chickernel-next-variants/ksu.config
+++ b/arch/arm64/configs/chickernel-next-variants/ksu.config
@@ -1,4 +1,4 @@
+
 CONFIG_KSU=y
 CONFIG_KSU_WITH_KPROBES=n
-
-CONFIG_LOCALVERSION="-chickernel-next-dev-5-ksu"
+CONFIG_LOCALVERSION="-chickernel-next-dev-5-ksun"
diff --git a/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config b/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
index 15045f6330236..616b726e9a3ea 100644
--- a/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
+++ b/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
@@ -18,4 +18,4 @@ CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
 CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
 CONFIG_KSU_SUSFS_SUS_SU=y
 
-CONFIG_LOCALVERSION="-chickernel-next-dev-5-ksu-susfs"
+CONFIG_LOCALVERSION="-chickernel-next-dev-5-ksun-susfs"
-- 
2.49.0


From 859ad06530a1f03846e8b33c3e466b961713d427 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Tue, 25 Feb 2025 16:30:05 +0600
Subject: [PATCH 4/8] KernelSU: update subproject commit reference to f5ae664

---
 KernelSU-Next | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/KernelSU-Next b/KernelSU-Next
index 86425c3e02122..f5ae6640d9cb3 160000
--- a/KernelSU-Next
+++ b/KernelSU-Next
@@ -1 +1 @@
-Subproject commit 86425c3e021226dab29c16634b2dd442201cbc5f
+Subproject commit f5ae6640d9cb3b0f82136ef5bfbc40ce18ba8682
-- 
2.49.0


From 0c7d16e7c1c3a454655c79a0b7da99ca788295e5 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Tue, 25 Feb 2025 16:33:24 +0600
Subject: [PATCH 5/8] arm64/configs: disable CONFIG_KSU_SUSFS_SUS_SU option in
 ksu_susfs.config

---
 arch/arm64/configs/chickernel-next-variants/ksu_susfs.config | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config b/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
index 616b726e9a3ea..90e7cdbb838ce 100644
--- a/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
+++ b/arch/arm64/configs/chickernel-next-variants/ksu_susfs.config
@@ -16,6 +16,6 @@ CONFIG_KSU_SUSFS_ENABLE_LOG=y
 CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
 CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
 CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
-CONFIG_KSU_SUSFS_SUS_SU=y
+CONFIG_KSU_SUSFS_SUS_SU=n
 
 CONFIG_LOCALVERSION="-chickernel-next-dev-5-ksun-susfs"
-- 
2.49.0


From ffb50a8ba240219845c431148b951cfe447b3cf8 Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Tue, 25 Feb 2025 17:32:33 +0600
Subject: [PATCH 6/8] KernelSU-Next: next-susfs: update subproject commit
 reference to d49dfdd

---
 KernelSU-Next | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/KernelSU-Next b/KernelSU-Next
index f5ae6640d9cb3..ca149a20217a1 160000
--- a/KernelSU-Next
+++ b/KernelSU-Next
@@ -1 +1 @@
-Subproject commit f5ae6640d9cb3b0f82136ef5bfbc40ce18ba8682
+Subproject commit ca149a20217a1cb164be7204418cd36815efe88d
-- 
2.49.0


From 5e207b1195a1a12ae6cac2bf4f4a08964ac096db Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Wed, 26 Feb 2025 01:56:00 +0600
Subject: [PATCH 7/8] KernelSU-Next: update subproject commit reference to
 ce0ff73

---
 KernelSU-Next | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/KernelSU-Next b/KernelSU-Next
index ca149a20217a1..ce0ff73951884 160000
--- a/KernelSU-Next
+++ b/KernelSU-Next
@@ -1 +1 @@
-Subproject commit ca149a20217a1cb164be7204418cd36815efe88d
+Subproject commit ce0ff7395188490934fb1b67446b6a351f22a2b4
-- 
2.49.0


From 6a9b5a62a0727c2c0b9211d2d40aaac5f61f28fd Mon Sep 17 00:00:00 2001
From: rifsxd <rifat.44.azad.rifs@gmail.com>
Date: Fri, 7 Mar 2025 21:47:53 +0600
Subject: [PATCH 8/8] kernelsu: refactor: scope-minimized manual hooks

---
 drivers/input/input.c | 21 ++++++++++-----------
 drivers/tty/pty.c     |  7 +++++++
 fs/devpts/inode.c     |  6 ------
 fs/exec.c             | 33 ++++++++++++++++++---------------
 fs/open.c             | 17 ++++++++---------
 fs/read_write.c       | 21 ++++++++++-----------
 fs/stat.c             | 18 ++++++++++--------
 7 files changed, 63 insertions(+), 60 deletions(-)

diff --git a/drivers/input/input.c b/drivers/input/input.c
index d7a6e238901b8..70737f6a34b7a 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -375,11 +375,6 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
-#ifdef CONFIG_KSU
-extern bool ksu_input_hook __read_mostly;
-extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
-#endif
-
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
@@ -390,12 +385,6 @@ static void input_handle_event(struct input_dev *dev,
 		return;
 
 	disposition = input_get_disposition(dev, type, code, &value);
-
-#ifdef CONFIG_KSU
-	if (unlikely(ksu_input_hook))
-		ksu_handle_input_handle_event(&type, &code, &value);
-#endif
-
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
@@ -457,11 +446,21 @@ static void input_handle_event(struct input_dev *dev,
  * to 'seed' initial state of a switch or initial position of absolute
  * axis, etc.
  */
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+#endif
+
 void input_event(struct input_dev *dev,
 		 unsigned int type, unsigned int code, int value)
 {
 	unsigned long flags;
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+#endif
+
 	if (is_event_supported(type, dev->evbit, EV_MAX)) {
 
 		spin_lock_irqsave(&dev->event_lock, flags);
diff --git a/drivers/tty/pty.c b/drivers/tty/pty.c
index 752dab3356d72..deb7c4ed493ed 100644
--- a/drivers/tty/pty.c
+++ b/drivers/tty/pty.c
@@ -702,11 +702,18 @@ static struct tty_struct *ptm_unix98_lookup(struct tty_driver *driver,
  *	This provides our locking for the tty pointer.
  */
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern int ksu_handle_devpts(struct inode*);
+#endif
+
 static struct tty_struct *pts_unix98_lookup(struct tty_driver *driver,
 		struct file *file, int idx)
 {
 	struct tty_struct *tty;
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_devpts((struct inode *)file->f_path.dentry->d_inode);
+#endif
 	mutex_lock(&devpts_mutex);
 	tty = devpts_get_priv(file->f_path.dentry);
 	mutex_unlock(&devpts_mutex);
diff --git a/fs/devpts/inode.c b/fs/devpts/inode.c
index 65a369432f751..51e503bdeefaa 100644
--- a/fs/devpts/inode.c
+++ b/fs/devpts/inode.c
@@ -601,9 +601,6 @@ extern bool ksu_devpts_hook;
 extern int ksu_handle_devpts(struct inode*);
 #endif
 
-#ifdef CONFIG_KSU
-extern int ksu_handle_devpts(struct inode*);
-#endif
 
 /**
  * devpts_get_priv -- get private data for a slave
@@ -619,9 +616,6 @@ void *devpts_get_priv(struct dentry *dentry)
 	}
 #endif
 
-#ifdef CONFIG_KSU
-    ksu_handle_devpts(dentry->d_inode);
-#endif
 
 	if (dentry->d_sb->s_magic != DEVPTS_SUPER_MAGIC)
 		return NULL;
diff --git a/fs/exec.c b/fs/exec.c
index 9ea0a32deb14f..58e43bdf81b2a 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1889,14 +1889,6 @@ extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
 				void *envp, int *flags);
 #endif
 
-#ifdef CONFIG_KSU
-extern bool ksu_execveat_hook __read_mostly;
-extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
-			void *envp, int *flags);
-extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
-				 void *argv, void *envp, int *flags);
-#endif
-
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -1913,13 +1905,6 @@ static int do_execveat_common(int fd, struct filename *filename,
 		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 #endif
 
-#ifdef CONFIG_KSU
-	if (unlikely(ksu_execveat_hook))
-		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
-	else
-		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
-#endif
-
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
 	 * set*uid() to execve() because too many poorly written programs
@@ -2049,12 +2034,26 @@ int kernel_execve(const char *kernel_filename,
 	return retval;
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
+#endif
+
 static int do_execve(struct filename *filename,
 	const char __user *const __user *__argv,
 	const char __user *const __user *__envp)
 {
 	struct user_arg_ptr argv = { .ptr.native = __argv };
 	struct user_arg_ptr envp = { .ptr.native = __envp };
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (unlikely(ksu_execveat_hook))
+		ksu_handle_execveat((int *)AT_FDCWD, &filename, &argv, &envp, 0);
+	else
+		ksu_handle_execveat_sucompat((int *)AT_FDCWD, &filename, NULL, NULL, NULL);
+#endif
 	return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
 }
 
@@ -2082,6 +2081,10 @@ static int compat_do_execve(struct filename *filename,
 		.is_compat = true,
 		.ptr.compat = __envp,
 	};
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (!ksu_execveat_hook)
+		ksu_handle_execveat_sucompat((int *)AT_FDCWD, &filename, NULL, NULL, NULL); /* 32-bit su */
+#endif
 	return do_execveat_common(AT_FDCWD, filename, argv, envp, 0);
 }
 
diff --git a/fs/open.c b/fs/open.c
index b40c47b4aadc4..4462051299ea5 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -340,11 +340,6 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
-#ifdef CONFIG_KSU
-extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
-			 int *flags);
-#endif
-
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -419,10 +414,6 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	}
 #endif
 
-#ifdef CONFIG_KSU
-	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
-#endif
-
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
 
@@ -487,8 +478,16 @@ static long do_faccessat(int dfd, const char __user *filename, int mode, int fla
 	return res;
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			                    int *flags);
+#endif
+
 SYSCALL_DEFINE3(faccessat, int, dfd, const char __user *, filename, int, mode)
 {
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
+#endif
 	return do_faccessat(dfd, filename, mode, 0);
 }
 
diff --git a/fs/read_write.c b/fs/read_write.c
index 04ff0dc3b9e15..a07056fc715f0 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -462,21 +462,10 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL_NS(kernel_read, ANDROID_GKI_VFS_EXPORT_ONLY);
 
-#ifdef CONFIG_KSU
-extern bool ksu_vfs_read_hook __read_mostly;
-extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
-			size_t *count_ptr, loff_t **pos);
-#endif
-
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
 
-#ifdef CONFIG_KSU 
-	if (unlikely(ksu_vfs_read_hook))
-		ksu_handle_vfs_read(&file, &buf, &count, &pos);
-#endif
-
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
 	if (!(file->f_mode & FMODE_CAN_READ))
@@ -639,8 +628,18 @@ ssize_t ksys_read(unsigned int fd, char __user *buf, size_t count)
 	return ret;
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_sys_read(unsigned int fd, char __user **buf_ptr,
+			size_t *count_ptr);
+#endif
+
 SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
 {
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	if (unlikely(ksu_vfs_read_hook)) 
+		ksu_handle_sys_read(fd, &buf, &count);
+#endif
 	return ksys_read(fd, buf, count);
 }
 
diff --git a/fs/stat.c b/fs/stat.c
index 85760bfb6566b..767aedf7425ff 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -202,10 +202,6 @@ int vfs_fstat(int fd, struct kstat *stat)
 	return error;
 }
 
-#ifdef CONFIG_KSU
-extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
-#endif
-
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -243,10 +239,6 @@ static int vfs_statx(int dfd, const char __user *filename, int flags,
 	}
 #endif
 
-#ifdef CONFIG_KSU
-	ksu_handle_stat(&dfd, &filename, &flags);
-#endif
-
 	if (flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT | AT_EMPTY_PATH |
 		      AT_STATX_SYNC_TYPE))
 		return -EINVAL;
@@ -450,6 +442,10 @@ SYSCALL_DEFINE2(newlstat, const char __user *, filename,
 	return cp_new_stat(&stat, statbuf);
 }
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+#endif
+
 #if !defined(__ARCH_WANT_STAT64) || defined(__ARCH_WANT_SYS_NEWFSTATAT)
 SYSCALL_DEFINE4(newfstatat, int, dfd, const char __user *, filename,
 		struct stat __user *, statbuf, int, flag)
@@ -457,6 +453,9 @@ SYSCALL_DEFINE4(newfstatat, int, dfd, const char __user *, filename,
 	struct kstat stat;
 	int error;
 
+#if defined(CONFIG_KSU) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_stat(&dfd, &filename, &flag);
+#endif
 	error = vfs_fstatat(dfd, filename, &stat, flag);
 	if (error)
 		return error;
@@ -608,6 +607,9 @@ SYSCALL_DEFINE4(fstatat64, int, dfd, const char __user *, filename,
 	struct kstat stat;
 	int error;
 
+#if defined(CONFIG_KSU) && defined(CONFIG_COMPAT) && !defined(CONFIG_KSU_WITH_KPROBES)
+	ksu_handle_stat(&dfd, &filename, &flag); /* 32-bit su */
+#endif
 	error = vfs_fstatat(dfd, filename, &stat, flag);
 	if (error)
 		return error;
-- 
2.49.0

