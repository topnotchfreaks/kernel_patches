From e75428b01cc4dff31962c38f31cf8cdfe5c745fa Mon Sep 17 00:00:00 2001
From: ordinary jackie <belowzeroiq@proton.me>
Date: Sat, 6 Sep 2025 08:51:13 +0000
Subject: [PATCH 1/2] Revert "ANDROID: 16K: Allocate pad vma on the stack"

This reverts commit 41a98a8c91918b0e4cfc621d6cdd5ab014765719.
---
 mm/pgsize_migration.c | 52 ++++++++++++++++++++++++++++++++-----------
 1 file changed, 39 insertions(+), 13 deletions(-)

diff --git a/mm/pgsize_migration.c b/mm/pgsize_migration.c
index 0ee7cacc3b7a7..b2b8e70739c2c 100644
--- a/mm/pgsize_migration.c
+++ b/mm/pgsize_migration.c
@@ -257,11 +257,23 @@ static const struct vm_operations_struct pad_vma_ops = {
 };
 
 /*
- * Initialize @pad VMA fields with information from the original @vma.
+ * Returns a new VMA representing the padding in @vma;
+ * returns NULL if no padding in @vma or allocation failed.
  */
-static void init_pad_vma(struct vm_area_struct *vma, struct vm_area_struct *pad)
+static struct vm_area_struct *get_pad_vma(struct vm_area_struct *vma)
 {
-	memcpy(pad, vma, sizeof(struct vm_area_struct));
+	struct vm_area_struct *pad;
+
+	if (!is_pgsize_migration_enabled() || !(vma->vm_flags & VM_PAD_MASK))
+		return NULL;
+
+	pad = kzalloc(sizeof(struct vm_area_struct), GFP_KERNEL);
+	if (!pad) {
+		pr_warn("Page size migration: Failed to allocate padding VMA");
+		return NULL;
+	}
+
+	*pad = *vma;
 
 	/* Remove file */
 	pad->vm_file = NULL;
@@ -277,34 +289,48 @@ static void init_pad_vma(struct vm_area_struct *vma, struct vm_area_struct *pad)
 
 	/* Remove padding bits */
 	pad->vm_flags &= ~VM_PAD_MASK;
+
+	return pad;
 }
 
 /*
- * Calls the show_pad_vma_fn on the @pad VMA.
+ * Calls the show_pad_vma_fn on the @pad VMA, and frees the copies of @vma
+ * and @pad.
  */
 void show_map_pad_vma(struct vm_area_struct *vma, struct seq_file *m,
 		      void *func, bool smaps)
 {
-	struct vm_area_struct pad;
-
-	if (!is_pgsize_migration_enabled() || !(vma->vm_flags & VM_PAD_MASK))
+	struct vm_area_struct *pad = get_pad_vma(vma);
+	if (!pad)
 		return;
 
-	init_pad_vma(vma, &pad);
+	/*
+	 * This cannot happen. If @pad vma was allocated the corresponding
+	 * @vma should have the VM_PAD_MASK bit(s) set.
+	 */
+	BUG_ON(!(vma->vm_flags & VM_PAD_MASK));
+
+	/*
+	 * This cannot happen. @pad is a section of the original VMA.
+	 * Therefore @vma cannot be null if @pad is not null.
+	 */
+	BUG_ON(!vma);
 
 	/* The pad VMA should be anonymous. */
-	BUG_ON(pad.vm_file);
+	BUG_ON(pad->vm_file);
 
 	/* The pad VMA should be PROT_NONE. */
-	BUG_ON(pad.vm_flags & (VM_READ|VM_WRITE|VM_EXEC));
+	BUG_ON(pad->vm_flags & (VM_READ|VM_WRITE|VM_EXEC));
 
 	/* The pad VMA itself cannot have padding; infinite recursion */
-	BUG_ON(pad.vm_flags & VM_PAD_MASK);
+	BUG_ON(pad->vm_flags & VM_PAD_MASK);
 
 	if (smaps)
-		((show_pad_smaps_fn)func)(m, &pad);
+		((show_pad_smaps_fn)func)(m, pad);
 	else
-		((show_pad_maps_fn)func)(m, &pad);
+		((show_pad_maps_fn)func)(m, pad);
+
+	kfree(pad);
 }
 
 /*
-- 
2.49.0

